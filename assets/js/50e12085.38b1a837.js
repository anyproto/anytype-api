"use strict";(self.webpackChunkanytype_api=self.webpackChunkanytype_api||[]).push([["4190"],{62505:function(e,t,s){s.r(t),s.d(t,{frontMatter:()=>r,toc:()=>h,default:()=>p,metadata:()=>n,assets:()=>l,contentTitle:()=>c});var n=JSON.parse('{"id":"examples/featured/raycast","title":"Anytype for Raycast","description":"A practical cookbook for developers looking to connect Anytype with Raycast. Discover step-by-step guides and real-world code examples to help you build custom extensions, automate your workflows, and make the most out of Anytype\u2019s API.","source":"@site/docs/examples/featured/raycast.mdx","sourceDirName":"examples/featured","slug":"/examples/featured/raycast","permalink":"/docs/examples/featured/raycast","draft":false,"unlisted":false,"editUrl":"https://github.com/anyproto/anytype-api/tree/main/docs/examples/featured/raycast.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Anytype for Raycast","description":"A practical cookbook for developers looking to connect Anytype with Raycast. Discover step-by-step guides and real-world code examples to help you build custom extensions, automate your workflows, and make the most out of Anytype\u2019s API.","keywords":["anytype","raycast","developer","api","integration","cookbook","automation","extensions","code examples","scripting","workflow"]},"sidebar":"exampleSidebar","previous":{"title":"Daily Journal in Python","permalink":"/docs/examples/featured/journal"},"next":{"title":"Anytype MCP Server","permalink":"/docs/examples/featured/mcp"}}'),a=s(85893),i=s(50065),o=s(83012);let r={sidebar_position:1,title:"Anytype for Raycast",description:"A practical cookbook for developers looking to connect Anytype with Raycast. Discover step-by-step guides and real-world code examples to help you build custom extensions, automate your workflows, and make the most out of Anytype\u2019s API.",keywords:["anytype","raycast","developer","api","integration","cookbook","automation","extensions","code examples","scripting","workflow"]},c="Anytype for Raycast",l={},h=[{value:"Overview",id:"overview",level:2},{value:"Authentication &amp; Pairing Flow",id:"authentication--pairing-flow",level:2},{value:"Data Fetching &amp; Pagination",id:"data-fetching--pagination",level:2},{value:"Caching &amp; State Management with Hooks",id:"caching--state-management-with-hooks",level:2},{value:"Error Handling &amp; User Feedback",id:"error-handling--user-feedback",level:2},{value:"Preferences &amp; Configuration",id:"preferences--configuration",level:2},{value:"Example Recipe: Creating and Prefilling a New Object from an Empty Search",id:"example-recipe-creating-and-prefilling-a-new-object-from-an-empty-search",level:2},{value:"1. Detecting an Empty Search",id:"1-detecting-an-empty-search",level:3},{value:"2. The Empty View Component",id:"2-the-empty-view-component",level:3},{value:"3. Prefilling the Create Form",id:"3-prefilling-the-create-form",level:3},{value:"4. Creating the Object",id:"4-creating-the-object",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){let t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"anytype-for-raycast",children:"Anytype for Raycast"})}),"\n",(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(t.p,{children:["The Anytype Raycast extension is a typescript client that brings the Anytype experience into the Raycast launcher. It lets users ",(0,a.jsx)(t.strong,{children:"create, browse, and search Anytype objects"})," directly from Raycast. Under the hood, the extension communicates with the Anytype desktop app via a local API, manages state with React hooks, and follows Raycast\u2019s guidelines for UI and performance. This write-up provides a deep dive into the extension\u2019s architecture and implementation, highlighting key decisions and patterns used to build a feature-rich API client in Raycast."]}),"\n",(0,a.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-between",flexWrap:"wrap"},children:[(0,a.jsxs)(t.p,{children:["Find the extension's repository on ",(0,a.jsx)(t.a,{href:"https://github.com/anyproto/anytype-raycast",children:"Github"}),", and install it from Raycast's store:"]}),(0,a.jsx)(o.default,{title:"Install anytype Raycast Extension",to:"https://www.raycast.com/any/anytype",children:(0,a.jsx)("img",{src:"https://www.raycast.com/any/anytype/install_button@2x.png?v=1.1",height:"48",alt:"Install Anytype"})})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Detail View in Raycast",src:s(67706).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Detail View in Raycast: Object body, with properties in right sidebar."}),"\n",(0,a.jsx)(t.h2,{id:"authentication--pairing-flow",children:"Authentication & Pairing Flow"}),"\n",(0,a.jsxs)(t.p,{children:["Anytype\u2019s API is secured, so the extension must authenticate with the running Anytype app. The extension uses a ",(0,a.jsx)(t.strong,{children:"local pairing flow"})," for authentication:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Pairing Process:"})," When the extension is first used (or if the API key is missing/invalid), it prompts the user to authenticate. The ",(0,a.jsx)(t.code,{children:"EnsureAuthenticated"})," component intercepts commands and displays a special UI. The user is asked to start a pairing, which triggers Anytype to show a ",(0,a.jsx)(t.strong,{children:"4-digit code"})," for verification. The extension calls the Anytype API to initiate this challenge and receives a ",(0,a.jsx)(t.code,{children:"challenge_id"})," for the session. A toast notification informs the user that pairing has started and to check the Anytype app for the code."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Entering the Code:"})," The extension then shows a form for the user to input the 4-digit code from Anytype. Upon submission, the extension calls the API with the ",(0,a.jsx)(t.code,{children:"challenge_id"})," and code to retrieve an ",(0,a.jsx)(t.code,{children:"api_key"}),". On success, this key is stored securely (using Raycast\u2019s LocalStorage) for future API calls, and a success toast confirms the extension is now paired. If the code is incorrect or pairing fails, an error toast notifies the user of the failure."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Key Storage & Validation:"})," The first time the extension runs, it checks if a saved key exists and validates it by making a trivial API call (e.g. ",(0,a.jsx)(t.code,{children:"getSpaces"})," with a small limit). If the API key is valid (or if the only error is that the Anytype app is not reachable), the extension proceeds. This check also compares API versions between the extension and Anytype; if there\u2019s a mismatch, the extension shows a clear toast instructing the user to update the app or extension. This ensures the client and server are using compatible API versions."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"EnsureAuthenticated Wrapper:"})," All top-level commands (Create, Browse, Search) are wrapped in an ",(0,a.jsx)(t.code,{children:"EnsureAuthenticated"})," component that implements the above logic. If a valid API key is present, it simply renders the child component (the actual command UI). If not, it displays a locking screen with a call to action to start pairing. This pattern centralizes auth logic and keeps the rest of the codebase focused on functionality."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Why this strategy?"})," Using a local pairing flow avoids storing user credentials or long-lived keys externally. By leveraging Anytype\u2019s app for the authentication UI (the code display) and a short key exchange, the extension stays secure and user-friendly. The flow also handles edge cases: it has built-in prompts to launch the Anytype app or download it if not running, and robust validation to prevent proceeding with an expired or incompatible key."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Pairing Process",src:s(52245).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Pairing Process: Prompting the user to authenticate with the Anytype app."}),"\n",(0,a.jsx)(t.h2,{id:"data-fetching--pagination",children:"Data Fetching & Pagination"}),"\n",(0,a.jsxs)(t.p,{children:["Once authenticated, the extension fetches data from the Anytype API for various domains: ",(0,a.jsx)(t.strong,{children:"spaces"}),", ",(0,a.jsx)(t.strong,{children:"objects"}),", ",(0,a.jsx)(t.strong,{children:"lists"}),", ",(0,a.jsx)(t.strong,{children:"types"}),", and ",(0,a.jsx)(t.strong,{children:"members"}),". The architecture relies on Raycast\u2019s asynchronous data utilities to handle ",(0,a.jsx)(t.strong,{children:"pagination"})," and ",(0,a.jsx)(t.strong,{children:"loading states"})," seamlessly:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"useCachedPromise:"})," The extension uses Raycast\u2019s ",(0,a.jsx)(t.code,{children:"useCachedPromise"})," hook to fetch data with caching and pagination support. For example, the ",(0,a.jsx)(t.code,{children:"useSpaces()"})," hook fetches a page of spaces from the API. It defines an async function that takes a page parameter, calculates an ",(0,a.jsx)(t.code,{children:"offset"}),", and calls the corresponding API endpoint (getSpaces) with a limit. The function returns an object with data (the fetched items) and a boolean hasMore flag indicating if more pages are available. Raycast uses this to handle infinite scrolling in lists. Similar hooks exist for objects (useObjects), members (useMembers), types (useTypes), and objects within a list (useObjectsInList), each tailoring the API call to its domain."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Pagination in UI:"})," The Raycast component is given the pagination object returned by these hooks. For instance, the global search command uses ",(0,a.jsx)(t.code,{children:"<List pagination={objectsPagination} ...>"})," so that scrolling triggers loading more results. The hooks also filter out any null or empty entries from results as a guard against transient API issues (preventing UI flickers with undefined items)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Offset and Limits:"})," By default, the extension fetches items in chunks defined by an apiLimit preference. This is configurable by the user (see ",(0,a.jsx)(t.strong,{children:"Preferences"})," below) but defaults to a reasonable number for performance. Internally, the hooks compute ",(0,a.jsx)(t.code,{children:"offset = page * limit"})," and request that slice of data. The Anytype API responses include a pagination object with has_more and total counts, which the extension uses to know when to stop fetching further pages."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Batch and Conditional Fetching:"})," For certain data, the extension employs specialized fetching strategies. For example, in the ",(0,a.jsx)(t.strong,{children:"Browse Spaces"})," view, after loading the list of spaces, it kicks off parallel requests to fetch the member count for each space (using a small page size of 1 just to get the total count from pagination metadata). These run in a ",(0,a.jsx)(t.code,{children:"Promise.all"})," to populate member counts without blocking the main UI. This design choice provides additional context (number of members per space) in the list view with minimal delay. All such background fetches have error handling \u2013 e.g. if fetching member counts fails, a toast alerts the user but the spaces list still displays."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["By leveraging ",(0,a.jsx)(t.code,{children:"useCachedPromise"})," and careful pagination logic, the extension efficiently handles potentially large data sets (many objects or members) while keeping the Raycast UI responsive. Developers can adapt this pattern for their own clients: define a hook per resource that returns data and pagination, and feed that into the client's list component for automatic continuous scroll behavior."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Paginated Data Fetching",src:s(58412).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Paginated Data Fetching: Loading more results as the user scrolls."}),"\n",(0,a.jsx)(t.h2,{id:"caching--state-management-with-hooks",children:"Caching & State Management with Hooks"}),"\n",(0,a.jsxs)(t.p,{children:["Handling state in a Raycast extension is a bit different from a typical web app. This extension uses a mix of ",(0,a.jsx)(t.strong,{children:"React hooks for transient state"}),", ",(0,a.jsx)(t.strong,{children:"Raycast\u2019s local storage for persistent state"}),", and ",(0,a.jsx)(t.strong,{children:"Context values"})," passed between components:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"React Local State:"})," For dynamic UI state, such as search query text, filter selections, or currently viewed section, the extension uses React\u2019s ",(0,a.jsx)(t.code,{children:"useState"})," hooks. In the global search component, for example, it maintains ",(0,a.jsx)(t.code,{children:"searchText"}),", the selected filter ",(0,a.jsx)(t.code,{children:"currentView"})," (to toggle between All, Pages, Tasks, etc.), and even caches of space icons in state. These state variables drive what query is sent to the API and how results are filtered or displayed (e.g., switching the currentView changes the filter for object types). The state is local to the component and resets when the command is closed, which is appropriate for ephemeral data like the current search or selection."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Persistent Cache (LocalStorage):"})," For data that should persist across sessions, such as API keys and user-defined pinned items, the extension uses Raycast\u2019s ",(0,a.jsx)(t.code,{children:"LocalStorage"})," API. The ",(0,a.jsx)(t.code,{children:"EnsureAuthenticated"})," component stores the obtained ",(0,a.jsx)(t.code,{children:"api_key"})," in local storage once pairing is successful. Similarly, when a user pins a space or object for quick access, that pin is saved. The extension implements helper utilities ",(0,a.jsx)(t.code,{children:"getPinned"})," and ",(0,a.jsx)(t.code,{children:"addPinned"})," to manage these lists in local storage (namespaced by a key). On startup of relevant views, hooks like ",(0,a.jsx)(t.code,{children:"usePinnedObjects"})," or ",(0,a.jsx)(t.code,{children:"usePinnedSpaces"})," retrieve these persisted IDs and then fetch fresh data for each pinned item to ensure they\u2019re up-to-date. If a pinned object is not found (e.g., it was deleted or archived in Anytype), the code catches the 404/410 response and automatically removes that item from the pinned list. This way, pinned shortcuts never linger as broken links \u2013 the extension self-heals by cleaning invalid pins."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Derived State via Hooks:"})," The extension also uses custom hooks to encapsulate complex stateful logic. A prime example is ",(0,a.jsx)(t.code,{children:"useCreateObjectData"}),', which gathers all necessary data for the "Create Object" form (like available spaces, types, templates, etc.) and manages the selection state of each. This hook returns state variables like ',(0,a.jsx)(t.code,{children:"selectedSpace"}),", ",(0,a.jsx)(t.code,{children:"selectedType"}),", etc., and setter functions to update them. It abstracts away the logic of loading all spaces or types and filtering out unwanted ones (like system object types that shouldn\u2019t be shown) so that the UI component can just consume the ready-to-use lists. Hooks like this often use multiple other hooks inside (for data fetching, etc.) and combine their results."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Context and Draft Values:"})," When navigating between views (for example, from an empty search result to the create form), the extension passes along ",(0,a.jsx)(t.strong,{children:"context values"})," to prefill the form. Raycast\u2019s navigation allows sending ",(0,a.jsx)(t.code,{children:"launchContext"})," or initial props; the extension uses a ",(0,a.jsx)(t.code,{children:"draftValues"})," object (of type ",(0,a.jsx)(t.code,{children:"CreateObjectFormValues"}),") to carry state between components. For instance, the search command\u2019s empty state passes ",(0,a.jsx)(t.code,{children:"{ name: searchText }"}),' as context to the create form (meaning "treat the search text as the name of the new object"). This context is merged with any existing draft values and used by ',(0,a.jsx)(t.code,{children:"useCreateObjectData"})," to initialize the form state. This pattern ensures a smooth experience: data flows through hooks and context rather than being stored in some global variable."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["In summary, the extension caches server data when appropriate (using Raycast caching and local storage) and uses React state for UI responsiveness. By carefully separating persistent state (like pins and auth) from transient state (like input text), it achieves both ",(0,a.jsx)(t.strong,{children:"performance"})," and ",(0,a.jsx)(t.strong,{children:"consistency"}),". Developers can emulate this by deciding which data needs to persist (store it via client's local storage) and which can be ephemeral, and by using custom hooks to encapsulate related state and side-effects."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Local Storage for Pinned Spaces",src:s(16953).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Local Storage for Pinned Spaces: Storing user preferences and pinned items."}),"\n",(0,a.jsx)(t.h2,{id:"error-handling--user-feedback",children:"Error Handling & User Feedback"}),"\n",(0,a.jsxs)(t.p,{children:["Robust error handling is crucial in a productivity tool \u2013 users should be informed of issues and guided on how to resolve them. The Anytype extension employs multiple layers of error handling, with clear ",(0,a.jsx)(t.strong,{children:"toast notifications"}),", graceful fallbacks, and informative empty states:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"API Connectivity Issues:"}),' If the extension cannot reach the Anytype API (e.g., the app is closed or not on the expected port), the fetch utilities throw a specific error message "Can\'t connect to API. Please ensure Anytype is running and reachable.". The authentication guard (',(0,a.jsx)(t.code,{children:"EnsureAuthenticated"}),') interprets this as a special case: it doesn\u2019t treat it as a key failure, allowing the UI to load and then show a relevant message elsewhere. Additionally, when a connection error is detected during API key validation, the extension returns true (assuming the API key is fine, just not reachable), meaning it proceeds as "authenticated" and lets the commands themselves still show previously cached data. In practice, if you open a command while Anytype is off, you\u2019ll see a toast with the connection error message whenever a data fetch fails, prompting you to launch the app.']}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Data Fetch Errors:"})," Each data-loading hook and component includes error handling. For instance, the Spaces list monitors ",(0,a.jsx)(t.code,{children:"spacesError"})," from the ",(0,a.jsx)(t.code,{children:"useSpaces"}),' hook and triggers a failure toast if it\u2019s non-null. This pattern repeats for other resources (types, templates, lists, etc.) \u2013 on any error, a toast appears with a generic "Failed to fetch \u2026" message and the actual error text (often originating from the API). By consolidating this in a useEffect listening to error state, the UI doesn\u2019t break; it simply shows whatever partial data is available (if any) and alerts the user. In many cases, even if one resource fails, others might succeed (e.g., spaces loaded but members count failed) \u2013 the extension prefers to show what it can rather than nothing at all.']}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Input Validation & Feedback:"})," During forms (like pairing or creating an object), validation rules are provided to catch issues early. For example, the pairing code form validates that the input is exactly 4 digits, giving an inline error if not. If the user tries to submit before starting the pairing challenge, the code checks ",(0,a.jsx)(t.code,{children:"challengeId"})," and shows a failure toast instructing to start pairing first. Similarly, when creating objects or spaces, required fields are validated in the Raycast form config (e.g., space name cannot be empty), and errors are shown to the user immediately instead of making a failing API call."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Success and Action Feedback:"}),' Positive actions are confirmed with toasts as well. Copying an object\u2019s deep link to clipboard triggers a success toast: "Link copied". Deleting an object shows a success message including the object\u2019s title once done. These small cues reassure the user that the command was received and processed. The extension uses ',(0,a.jsx)(t.code,{children:"Toast.Style.Success"})," and ",(0,a.jsx)(t.code,{children:"Toast.Style.Failure"})," consistently to differentiate outcomes. It also leverages Raycast\u2019s ",(0,a.jsx)(t.code,{children:"showToast"})," capabilities such as ",(0,a.jsx)(t.code,{children:"primaryAction"})," on the toast \u2013 for example, if starting the pairing fails because Anytype isn\u2019t running, the error toast suggests opening Anytype (and even provides a one-click action to do so) , as well as an option to download the app if it\u2019s not installed."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Empty States with Actions:"})," Rather than showing a blank screen when a list is empty, the extension uses ",(0,a.jsx)(t.strong,{children:"Empty States"})," to guide the user. Raycast\u2019s ",(0,a.jsx)(t.code,{children:"<List.EmptyView>"}),' is utilized to display a message and suggest next steps. For instance, if no spaces match the search query in the "Browse Spaces" view, the list shows ',(0,a.jsx)(t.em,{children:'"No spaces found"'})," with a prompt that the user can press \u23CE (Enter) to create a new space. Under the hood, this is implemented by a component ",(0,a.jsx)(t.code,{children:"EmptyViewSpace"}),' that provides an action to open the "Create Space" form, carrying over the attempted name as a draft. The same concept is applied to object lists: ',(0,a.jsx)(t.em,{children:'"No objects found"'})," can prompt creating a new object. These empty state components improve UX by turning a dead-end into a shortcut for a useful action."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Overall, the extension strives to never leave the user guessing. Whether through a quick toast or an interactive empty state, it provides ",(0,a.jsx)(t.strong,{children:"immediate feedback"})," and often a path to resolve the issue (open the app, try again, insert a name, etc.). This approach can serve as a blueprint: always catch errors from API calls, validate inputs, use toasts and UI elements to communicate, and anticipate scenarios like offline or outdated versions proactively."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Input Validation",src:s(84434).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Input Validation: Ensuring the user enters required information correctly."}),"\n",(0,a.jsx)(t.h2,{id:"preferences--configuration",children:"Preferences & Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["To make the extension flexible for power users, a set of ",(0,a.jsx)(t.strong,{children:"preferences"})," is exposed in Raycast\u2019s configuration for the extension. These preferences allow users (and developers testing the extension) to tweak how data is fetched and displayed. Key preferences include:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Result Limit:"})," The number of items fetched per page is controlled by a preference (",(0,a.jsx)(t.code,{children:"limit"}),"). By default this might be a value like 50 or 100. The extension reads this at runtime and uses it as the ",(0,a.jsx)(t.code,{children:"apiLimit"})," for all paginated requests. Advanced users could increase this limit (up to a maximum capped in code, e.g. 1000) if they want to load more items at once, or decrease it to improve performance on slower machines. The code ensures that even if the user sets a very high limit, Raycast\u2019s UI can handle it (through pagination) and the backend is not overwhelmed beyond what Anytype allows."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Default Sorting:"})," Anytype objects can be sorted by different properties (e.g., last modified date, created date, name, etc.). The extension provides a ",(0,a.jsx)(t.strong,{children:"Sort"})," preference that the user can set (for instance, ",(0,a.jsx)(t.em,{children:"Last Modified"})," vs ",(0,a.jsx)(t.em,{children:"Name"}),"). This preference is fetched via ",(0,a.jsx)(t.code,{children:"getPreferenceValues()"}),' and used to determine ordering of results and the labeling of sections. For example, the section title in global search toggles between "Recent" and "Alphabetical" contextually, and the sort direction is set accordingly (Name sorting uses ascending A\u2192Z, whereas date-based sorting uses descending to show newest first). In the implementation, if the sort is set to "Name", the extension flips the sort direction to ascending; for any date-based sort, it defaults to descending (most recent first). This logic is applied uniformly in search and browse commands so that the user\u2019s preference reflects everywhere.']}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Primary Action (Link Behavior):"})," Perhaps the most noticeable preference is ",(0,a.jsx)(t.em,{children:"Link Behavior"}),", labeled in code as ",(0,a.jsx)(t.code,{children:"primaryAction"}),". This setting defines what happens when the user selects (hits Enter on) an Anytype object in Raycast. The two primary options are: ",(0,a.jsx)(t.strong,{children:"Show Details in Raycast"})," vs ",(0,a.jsx)(t.strong,{children:"Open in Anytype"}),". If the user prefers Raycast\u2019s quick view, the extension will show an in-extension detail view of the object. If they prefer to jump into the full Anytype app, the extension will instead launch Anytype via a deep link (",(0,a.jsx)(t.code,{children:"anytype://object?..."}),"). The implementation uses the ",(0,a.jsx)(t.code,{children:"primaryAction"}),' value to swap actions in the result list. It pre-defines two actions \u2013 one to push a detailed view, and one to open the Anytype app \u2013 and chooses which one to make the default (first) action based on the setting. The second option is still available via the action panel (e.g., as a secondary action), so both are accessible at any time, but the preference decides which is on the "top" for a faster workflow. Under the hood, Raycast\u2019s is constructed with something like:']}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'const firstPrimaryAction = primaryAction === "show_details" ? showDetailsAction : openObjectAction;\nconst secondPrimaryAction = primaryAction === "show_details" ? openObjectAction : showDetailsAction;\n'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"and then those are added in order. This elegant approach means we don\u2019t duplicate the entire action panel logic \u2013 just compute and re-order references."}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Anytype App Path:"}),' In cases where the Anytype app isn\u2019t in the standard location or if multiple versions exist, the extension offers a preference to specify the path to the Anytype application. This is used when the extension needs to programmatically launch the app (for example, if the user clicks "Open Anytype" during the pairing flow). By default, the extension tries a sensible default path, but this preference allows manual override.']}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The preferences are defined in the extension\u2019s metadata and are accessed via ",(0,a.jsx)(t.code,{children:"getPreferenceValues()"})," throughout the code. Because Raycast makes preferences reactive (changes take effect on next command invocation), the extension reads these values at runtime rather than hard-coding constants. This design lets developers and users fine-tune the extension\u2019s behavior without altering code."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Extension Settings",src:s(18690).Z+"",width:"2224",height:"1524"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Extension Settings: User-configurable preferences for the extension."}),"\n",(0,a.jsx)(t.h2,{id:"example-recipe-creating-and-prefilling-a-new-object-from-an-empty-search",children:"Example Recipe: Creating and Prefilling a New Object from an Empty Search"}),"\n",(0,a.jsxs)(t.p,{children:["One of the powerful features of the Anytype extension is the ability to ",(0,a.jsx)(t.strong,{children:"quickly create a new object when a search comes up empty"}),'. This turns a "no results" scenario into an opportunity to populate your vault. Let\u2019s walk through how this is implemented, step by step, as a cookbook-style recipe.']}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Scenario:"}),' The user invokes the "Search Anytype" command in Raycast and types a search term (for example, a project name or note title). The extension searches across all spaces and object types. If it finds nothing matching the query, it will allow the user to create a new object with that query as the starting point.']}),"\n",(0,a.jsx)(t.h3,{id:"1-detecting-an-empty-search",children:"1. Detecting an Empty Search"}),"\n",(0,a.jsxs)(t.p,{children:["In the Search Anytype command component, after attempting to load results and pinned items, the extension checks if there are any objects to show. This is done in the JSX return of the component. If the list of results is empty, instead of returning nothing, the component returns an ",(0,a.jsx)(t.code,{children:"<EmptyViewObject>"})," element :"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'{results.length > 0 ? (\n    /* ... render results ... */\n) : (\n    <EmptyViewObject\n       title="No objects found"\n       contextValues={{ name: searchText }}\n    />\n)}\n\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Here, ",(0,a.jsx)(t.code,{children:"searchText"}),' is the user\u2019s query. By providing it in contextValues (specifically as the name field), we pass the information that "if a new object is created, it should have this name" - at least initially. The same context logic applies to pre-selected space, type or collection, if the user searches in a specific space or list.']}),"\n",(0,a.jsx)(t.h3,{id:"2-the-empty-view-component",children:"2. The Empty View Component"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"EmptyViewObject"}),' is a small wrapper that renders a friendly message and prepares the create-object action. It shows a message like "No objects found" and a description "Create a new object by pressing \u23CE". More importantly, it defines what happens on that \u23CE. Inside ',(0,a.jsx)(t.code,{children:"EmptyViewObject"}),", the code looks like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'<List.EmptyView\n  title={title}\n  description="Create a new object by pressing \u23CE"\n  actions={\n    <ActionPanel>\n      <Action.Push title="Create Object" target={<CreateObjectForm draftValues={draftValues} />} icon={Icon.Plus} />\n    </ActionPanel>\n  }\n/>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This is exactly what the extension does. When the user presses Enter on this empty view, it ",(0,a.jsx)(t.strong,{children:"pushes a Create Object form onto the navigation stack"}),", with the ",(0,a.jsx)(t.code,{children:"draftValues"})," passed along. The ",(0,a.jsx)(t.code,{children:"draftValues"})," are derived from the ",(0,a.jsx)(t.code,{children:"contextValues"})," we provided earlier. In our case, ",(0,a.jsx)(t.code,{children:"draftValues"})," will contain at least a name property (and possibly default space or type if the context knows it). The ",(0,a.jsx)(t.code,{children:"EmptyViewObject"})," component ensures all expected fields exist in ",(0,a.jsx)(t.code,{children:"draftValues"})," \u2013 if some context is not provided, it initializes them to undefined but keeps the object shape (space, type, list, etc.). This ensures the create form receives a complete object for its uncontrolled state."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note:"})," The use of ",(0,a.jsx)(t.code,{children:"<Action.Push>"}),' here is key. It means the extension is not starting a whole new command, but simply navigating within the Raycast extension UI to a new view. The user will see the "Create Object" form slide in, with their search query prefilled.']}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Empty View",src:s(73602).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Empty View: Offering the user a way to create a new object when no results are found."}),"\n",(0,a.jsx)(t.h3,{id:"3-prefilling-the-create-form",children:"3. Prefilling the Create Form"}),"\n",(0,a.jsxs)(t.p,{children:["When the ",(0,a.jsx)(t.code,{children:"CreateObjectForm"})," component mounts as a result of this navigation, it reads the ",(0,a.jsx)(t.code,{children:"draftValues"}),' passed to it. The form is implemented using Raycast\u2019s form APIs (with text fields, dropdowns, etc. for object properties). The provided draft values populate the corresponding fields. For example, the "Name" field of the new object will already have the search text filled in. The code that handles merging draft values is in the ',(0,a.jsx)(t.code,{children:"CreateObject"})," command logic:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const mergedValues = { ...launchContext?.defaults, ...draftValues };\nconst { spaces, types, templates, lists, selectedSpace, selectedType, ... } = useCreateObjectData(mergedValues);\n...\n<CreateObjectForm\n    spaces={spaces} types={types} templates={templates} lists={lists}\n    selectedSpace={selectedSpace} setSelectedSpace={setSelectedSpace}\n    ...\n    draftValues={mergedValues}\n    enableDrafts={true}\n/>\n\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"mergedValues"})," line merges any ",(0,a.jsx)(t.code,{children:"launchContext.defaults"})," (which could come from created quicklinks) with our ",(0,a.jsx)(t.code,{children:"draftValues"}),", giving precedence to ",(0,a.jsx)(t.code,{children:"draftValues"}),". In the empty search case, ",(0,a.jsx)(t.code,{children:"launchContext"})," is not used, so ",(0,a.jsx)(t.code,{children:"mergedValues"})," is effectively just our ",(0,a.jsx)(t.code,{children:'{ name: "...user query..." }'}),". This is passed into ",(0,a.jsx)(t.code,{children:"useCreateObjectData"})," which will immediately load the necessary supporting data (like the list of spaces and object types) and pick defaults for space/type if not specified. Notably, if only the name is provided, the extension will auto-select the first space and first object type as defaults so that the form is ready to submit with minimal input.\nThe form component (CreateObjectForm) receives ",(0,a.jsx)(t.code,{children:"draftValues={mergedValues}"}),", which the text fields use as initial values. ",(0,a.jsx)(t.code,{children:"enableDrafts={true}"})," allows Raycast to preserve the form state if the user navigates away and back (not strictly needed for this flow, but useful in general if the user accidentally closes the form)."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Prefilling Create Form",src:s(29211).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:(0,a.jsx)(t.p,{children:"Prefilling Create Form: The form is prefilled with the search query as the object name and selected list as collection."})}),"\n",(0,a.jsx)(t.h3,{id:"4-creating-the-object",children:"4. Creating the Object"}),"\n",(0,a.jsxs)(t.p,{children:["With the form prefilled, the user can adjust any other fields (pick a different space or type, add a description, etc.) or just hit ",(0,a.jsx)(t.strong,{children:"Cmd+Enter"})," to create the object. The form\u2019s submit handler will call the Anytype API to create a new object with all the collected fields. Since the extension already loaded the required context (like space and type IDs), it can call the correct endpoint immediately. On success, a toast appears confirming the object creation, and the extension navigates back or closes the form (often using ",(0,a.jsx)(t.code,{children:"popToRoot()"})," to return to the main list) \u2013 this detail is handled inside the form\u2019s implementation.\nIf the user had started from an empty search and created an object, they\u2019ll typically see that new object appear in search results immediately (if the search query still matches the name) or they can find it in the relevant space."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Why is this useful?"})," From a UX standpoint, this feature saves time \u2013 the user doesn\u2019t have to realize they need to switch context to Anytype and create something; the extension bridges that gap. Architecturally, it demonstrates how to use Raycast\u2019s navigation and context passing to link separate commands (search and create) into one flow. The combination of ",(0,a.jsx)(t.code,{children:"<List.EmptyView>"})," with an action and a full for creation is a recipe that can be reused in other integrations: whenever you have a searchable list that might yield nothing, consider offering the user a way to create what they\u2019re looking for."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Confirmation of Object Creation",src:s(88153).Z+"",width:"1772",height:"1172"})}),"\n",(0,a.jsx)("span",{className:"imageCaption",children:"Confirmation of Object Creation: Toast notification confirming the successful creation of the object."}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(t.p,{children:['The Anytype Raycast extension demonstrates how to build a powerful client on top of the Anytype API, using Raycast as a lightweight, high-performance interface for creation, search, and navigation." We covered how it handles ',(0,a.jsx)(t.strong,{children:"authentication"})," through a secure pairing flow, efficiently ",(0,a.jsx)(t.strong,{children:"fetches and paginates data"})," for potentially thousands of items, ",(0,a.jsx)(t.strong,{children:"caches state"})," and uses hooks to keep the UI responsive, and provides robust ",(0,a.jsx)(t.strong,{children:"error handling"})," and ",(0,a.jsx)(t.strong,{children:"user feedback"})," at every step. We also walked through a concrete example of bridging features (search to create) to deliver a seamless user experience."]}),"\n",(0,a.jsx)(t.p,{children:"For developers, this extension serves as a practical reference for building feature-rich API clients. Key takeaways include:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Using wrappers like EnsureAuthenticated to guard multiple commands with shared logic."}),"\n",(0,a.jsx)(t.li,{children:"Leveraging useCachedPromise and Raycast's built-in pagination for handling large data sets."}),"\n",(0,a.jsx)(t.li,{children:"Maintaining local cache (like pinned items or API keys) and syncing with remote state."}),"\n",(0,a.jsx)(t.li,{children:"Providing user-customizable preferences to adapt to different workflows."}),"\n",(0,a.jsx)(t.li,{children:"Designing UI flows that feel natural in Raycast (using navigation pushes, forms, and empty states with calls to action)."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"By studying this architecture, you can implement similarly capable extensions \u2013 that feel native to Raycast or other services \u2013 while handling the heavy lifting of external API communication. Happy coding!"})]})}function p(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},67706:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast1-8596e3202ec5384975bd04230e7b3bf7.png"},52245:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast2-afed57584c033e540fdcf11a68f6633a.png"},58412:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast3-fb96c4ac07eb343ef4a924f8a512e115.png"},16953:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast4-ed711c276a5d97ee8d2c468142bc50e3.png"},84434:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast5-cd930fcac983c450c00b01385a74d631.png"},18690:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast6-937e5ab4657029d5cd4414a6862f9442.png"},73602:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast7-0d6249c6e63081828ba57d8cdb8b036f.png"},29211:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast8-ae163b649a5dfaf19acfc7506d783456.png"},88153:function(e,t,s){s.d(t,{Z:()=>n});let n=s.p+"assets/images/raycast9-91727357fa09f0067595aa0ade7e4110.png"}}]);