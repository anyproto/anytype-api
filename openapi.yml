openapi: 3.0.0
info:
  title: Anytype API
  description: This API allows interaction with Anytype resources such as spaces, objects, and object types.
  version: 1.0.0

servers:
  - url: /v1
    description: Version 1 of the API

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    OffsetParameter:
      in: query
      name: offset
      schema:
        type: integer
        minimum: 0
      required: false
      description: The number of items to skip before starting to collect the result set
    LimitParameter:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        default: 100
      required: false
      description: The number of items to return
    SpaceIdParameter:
      in: path
      name: space_id
      schema:
        type: string
      required: true
      description: The ID of the space
    ObjectIdParameter:
      in: path
      name: object_id
      schema:
        type: string
      required: true
      description: The ID of the object
  schemas:
    Space:
      type: object
      properties:
        type:
          type: string
          example: "space"
        id:
          type: string
        name:
          type: string
    SpaceMember:
      type: object
      properties:
        type:
          type: string
          example: "space_member"
        id:
          type: string
        name:
          type: string
        role:
          type: string
          enum: ["editor", "viewer", "owner"]
    Object:
      type: object
      properties:
        type:
          type: string
          example: "object"
        id:
          type: string
        name:
          type: string
        objectType:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        relations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              values:
                type: array
                items:
                  type: string
    ObjectType:
      type: object
      properties:
        type:
          type: string
          example: "object_type"
        id:
          type: string
        name:
          type: string
    ObjectTemplate:
      type: object
      properties:
        type:
          type: string
          example: "object_template"
        id:
          type: string
        name:
          type: string
  responses:
    UnauthorizedError:
      description: Authentication token is missing or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or missing authentication token."
    NotFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource with specified ID doesn't exist."
    ValidationError:
      description: Invalid input.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Input validation failed."
    ServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "An internal server error occurred."

security:
  - BearerAuth: []

paths:
  /auth/displayCode:
    post:
      summary: Open a modal window with a code in Anytype Desktop app
      tags:
        - auth
      responses:
        '200':
          description: Success
        '502':
          $ref: '#/components/responses/ServerError'

  /auth/token:
    get:
      summary: Retrieve an authentication token using a code
      tags:
        - auth
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
          description: The code retrieved from Anytype Desktop app
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "kjasdlksjadkjasld"
                  refresh_token:
                    type: string
                    example: "kjasdlksjadkjasld"
        '400':
          $ref: '#/components/responses/ValidationError'
        '502':
          $ref: '#/components/responses/ServerError'

  /spaces:
    post:
      summary: Create a new Space
      tags:
        - spaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Space created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '502':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Retrieve a list of spaces
      tags:
        - spaces
      parameters:
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  spaces:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '502':
          $ref: '#/components/responses/ServerError'

  /spaces/{space_id}/members:
    get:
      summary: Retrieve a list of members for the specified Space
      tags:
        - spaces
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpaceMember'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '502':
          $ref: '#/components/responses/ServerError'

  /spaces/{space_id}/objects:
    get:
      summary: Retrieve objects in a specific space
      tags:
        - space_objects
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Object'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '502':
          $ref: '#/components/responses/ServerError'

  /spaces/{space_id}/objectTypes:
    get:
      summary: Retrieve object types in a specific space
      tags:
        - types_and_templates
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  objectTypes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectType'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '502':
          $ref: '#/components/responses/ServerError'

  /spaces/{space_id}/objectTypes/{typeId}/templates:
    get:
      summary: Retrieve a list of templates for a specific object type in a space
      tags:
        - types_and_templates
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
        - in: path
          name: typeId
          schema:
            type: string
          required: true
          description: The ID of the object type
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectTemplate'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '502':
          $ref: '#/components/responses/ServerError'

  /spaces/{space_id}/objects/{object_id}:
    get:
      summary: Retrieve a specific object in a space
      tags:
        - space_objects
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
        - $ref: '#/components/parameters/ObjectIdParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '502':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new object in a specific space
      tags:
        - space_objects
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
        - $ref: '#/components/parameters/ObjectIdParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Object created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    $ref: '#/components/schemas/Object'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '502':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update an existing object in a specific space
      tags:
        - space_objects
      parameters:
        - $ref: '#/components/parameters/SpaceIdParameter'
        - $ref: '#/components/parameters/ObjectIdParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: Object updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '502':
          $ref: '#/components/responses/ServerError'
          

  /objects:
    get:
      summary: Search and retrieve objects across all the spaces
      tags:
        - search
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: The search term to filter objects by name
        - in: query
          name: object_type
          schema:
            type: string
          description: Specify object type for search
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Object'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '502':
          $ref: '#/components/responses/ServerError'
